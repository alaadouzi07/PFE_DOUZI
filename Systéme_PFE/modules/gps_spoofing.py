# import numpy as np
# import time
# import os
# from tkinter import messagebox
# from modules.gnss_processor import GNSSProcessor
# import tensorflow as tf
# import keras
# from keras.models import load_model
# from keras.layers import TFSMLayer, Input
# from keras.models import Model

# # D√©finir la m√©trique mse avec le d√©corateur pour Keras 3
# @keras.saving.register_keras_serializable()
# def mse(y_true, y_pred):
#     """
#     M√©trique Mean Squared Error personnalis√©e pour le mod√®le.
#     """
#     return keras.metrics.mean_squared_error(y_true, y_pred)

# def load_spoof_detection_model(
#     model_path_h5="gnss_spoof_detector/spoof_detector/autoencoder_model.h5",
#     model_path_keras="gnss_spoof_detector/spoof_detector/autoencoder_model.keras",
#     model_path_savedmodel="gnss_spoof_detector/spoof_detector/autoencoder_model"
# ):
#     """
#     Charge le mod√®le de d√©tection GPS spoofing.
#     Tente d'abord de charger un fichier .keras, puis .h5, et enfin SavedModel via TFSMLayer.
    
#     :param model_path_h5: Chemin vers le fichier .h5
#     :param model_path_keras: Chemin vers le fichier .keras
#     :param model_path_savedmodel: Chemin vers le dossier SavedModel
#     :return: Mod√®le charg√© ou None si √©chec
#     """
#     model = None

#     # Essayer de charger le fichier .keras
#     if os.path.exists(model_path_keras):
#         try:
#             model = load_model(model_path_keras, custom_objects={'mse': mse})
#             print(f"‚úÖ Mod√®le charg√© au format .keras depuis {model_path_keras}")
#             return model
#         except Exception as e:
#             print(f"‚ùå √âchec du chargement .keras : {e}")

#     # Essayer de charger le fichier .h5
#     if os.path.exists(model_path_h5):
#         try:
#             model = load_model(model_path_h5, custom_objects={'mse': mse})
#             print(f"‚úÖ Mod√®le charg√© au format .h5 (HDF5) depuis {model_path_h5}")
#             return model
#         except Exception as e:
#             print(f"‚ùå √âchec du chargement .h5 : {e}")

#     # Essayer de charger le SavedModel avec TFSMLayer
#     if os.path.exists(model_path_savedmodel):
#         print("üîÅ Tentative avec format SavedModel via TFSMLayer...")
#         try:
#             # Charger le SavedModel comme une couche
#             model_layer = TFSMLayer(model_path_savedmodel, call_endpoint="serving_default")
#             # Cr√©er un mod√®le Keras fonctionnel
#             input_shape = (None, 2)  # Ajuster selon la forme d'entr√©e (latitude, longitude)
#             inputs = Input(shape=input_shape[1:])
#             outputs = model_layer(inputs)
#             model = Model(inputs, outputs)
#             print(f"‚úÖ Mod√®le charg√© avec tf.keras.layers.TFSMLayer (SavedModel) depuis {model_path_savedmodel}")
#             return model
#         except Exception as e:
#             print(f"‚ùå √âchec du chargement SavedModel : {e}")

#     # Si aucun mod√®le n'a pu √™tre charg√©
#     print("‚ùå Aucun mod√®le n'a pu √™tre charg√©. V√©rifiez les chemins et formats des fichiers.")
#     return None

# def detect_gps_spoofing(mode="R√©el", model=None, threshold=0.5):
#     """
#     Analyse les donn√©es GPS et d√©tecte le spoofing.
    
#     :param mode: "R√©el" pour r√©cup√©rer des donn√©es GPS, "Simulation" pour g√©n√©rer des coordonn√©es factices.
#     :param model: Mod√®le Autoencoder charg√© (Keras Model ou TFSMLayer encapsul√©).
#     :param threshold: Seuil de d√©tection d'anomalie.
#     :return: True si spoofing d√©tect√©, False sinon.
#     """
#     processor = GNSSProcessor()

#     # R√©cup√©ration des donn√©es GPS (ou simulation)
#     if mode == "Simulation":
#         fake_lat, fake_lon = np.random.uniform(-90, 90), np.random.uniform(-180, 180)
#         data = np.array([[fake_lat, fake_lon]])
#         print(f"üì° Donn√©es simul√©es : Latitude={fake_lat}, Longitude={fake_lon}")
#     else:
#         gps_data = processor.get_current_location()
#         if gps_data is None:
#             print("‚ö†Ô∏è Impossible d'obtenir les donn√©es GPS.")
#             return False
#         data = np.array([[gps_data.latitude, gps_data.longitude]])
#         print(f"üì° Donn√©es GPS re√ßues : Latitude={gps_data.latitude}, Longitude={gps_data.longitude}")

#     # V√©rifier si le mod√®le est charg√©
#     if model is None:
#         print("‚ùå Mod√®le non charg√©. Assurez-vous d'appeler load_spoof_detection_model() avant.")
#         return False

#     # Pr√©diction et calcul de l'erreur de reconstruction
#     try:
#         # Pr√©parer les donn√©es pour la pr√©diction
#         data = data.astype(np.float32)  # Assurer le bon type de donn√©es
#         # Appel du mod√®le pour reconstruire les donn√©es
#         reconstructed = model.predict(data) if hasattr(model, 'predict') else model(data)
#         error = np.mean(np.abs(data - reconstructed))
#     except Exception as e:
#         print(f"‚ùå Erreur lors de la pr√©diction : {e}")
#         return False

#     # D√©tection du spoofing bas√©e sur l'erreur
#     if error > threshold:
#         timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
#         messagebox.showwarning("üö® ALERTE GPS SPOOFING üö®", f"Spoofing d√©tect√© ! ({timestamp})\nErreur : {error:.4f}")
#         print(f"üö® Spoofing d√©tect√© ! Erreur={error:.4f}")
#         return True

#     print(f"‚úÖ Aucune anomalie d√©tect√©e. Erreur={error:.4f}")
#     return False

import numpy as np
import tensorflow as tf
import os

def load_spoof_detection_model(model_path_keras, model_path_h5, model_path_savedmodel):
    """Charge le mod√®le de d√©tection de spoofing GPS."""
    try:
        if os.path.exists(model_path_keras):
            print(f"[INFO] Chargement du mod√®le depuis {model_path_keras}")
            return tf.keras.models.load_model(model_path_keras)
        elif os.path.exists(model_path_h5):
            print(f"[INFO] Chargement du mod√®le depuis {model_path_h5}")
            return tf.keras.models.load_model(model_path_h5)
        elif os.path.exists(model_path_savedmodel):
            print(f"[INFO] Chargement du mod√®le depuis {model_path_savedmodel}")
            return tf.saved_model.load(model_path_savedmodel)
        else:
            print("[ERREUR] Aucun fichier mod√®le trouv√©")
            return None
    except Exception as e:
        print(f"[ERREUR] √âchec du chargement du mod√®le: {str(e)}")
        return None

def detect_gps_spoofing(mode, model, gps_data=None, threshold=0.5):
    """
    D√©tecte le spoofing GPS en utilisant un mod√®le d'autoencodeur.

    Args:
        mode (str): Mode de d√©tection ("R√©el" ou "Simul√©")
        model: Mod√®le d'autoencodeur charg√©
        gps_data (list): Donn√©es GPS [lat, lon, alt, vitesse, cap, snr, nb_satellites, timestamp]
        threshold (float): Seuil pour la d√©tection d'anomalie

    Returns:
        bool: True si une attaque est d√©tect√©e, False sinon
    """
    try:
        if model is None:
            print("[ERREUR] Mod√®le non charg√©, impossible de faire une pr√©diction")
            return False

        # V√©rifier si des donn√©es GPS sont fournies
        if gps_data is None:
            print("[INFO] Aucune donn√©e GPS fournie, utilisation de donn√©es par d√©faut")
            gps_data = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0]  # Donn√©es par d√©faut

        # S'assurer que gps_data a 8 caract√©ristiques
        expected_features = 8
        if len(gps_data) != expected_features:
            print(f"[ERREUR] Les donn√©es GPS doivent avoir {expected_features} caract√©ristiques, mais {len(gps_data)} fournies")
            # Compl√©ter avec des z√©ros si n√©cessaire
            gps_data.extend([0.0] * (expected_features - len(gps_data)))
            gps_data = gps_data[:expected_features]

        # Convertir les donn√©es GPS en tableau numpy avec la forme (1, 8)
        data = np.array([gps_data], dtype=np.float32)
        print(f"[DEBUG] Donn√©es GPS pour pr√©diction: {data}, forme: {data.shape}")

        # Faire une pr√©diction avec l'autoencodeur
        reconstructed = model.predict(data)

        # Calculer l'erreur de reconstruction (MSE)
        mse = np.mean(np.square(data - reconstructed))
        print(f"[DEBUG] Erreur de reconstruction (MSE): {mse}, Seuil: {threshold}")

        # D√©tecter une anomalie si l'erreur d√©passe le seuil
        is_spoofed = mse > threshold
        print(f"[DEBUG] Spoofing d√©tect√©: {is_spoofed}")

        return is_spoofed

    except Exception as e:
        print(f"[ERREUR] √âchec de la pr√©diction: {str(e)}")
        return False
